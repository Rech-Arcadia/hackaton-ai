{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef } from 'react';\nimport { paymentService } from '../services/paymentService';\nconst INITIAL_STATE = {\n  status: 'idle',\n  // 'idle' | 'pending_authorization' | 'completed' | 'error'\n  loading: false,\n  data: null,\n  error: null,\n  sessionId: null\n};\nexport const usePayment = () => {\n  _s();\n  const [paymentState, setPaymentState] = useState(INITIAL_STATE);\n  const abortControllerRef = useRef(null);\n\n  // Función para actualizar el estado de forma segura\n  const updateState = useCallback(updates => {\n    setPaymentState(prevState => ({\n      ...prevState,\n      ...updates\n    }));\n  }, []);\n\n  // Función para iniciar el proceso de pago\n  const initiatePayment = useCallback(async paymentData => {\n    try {\n      // Cancelar cualquier solicitud anterior\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      abortControllerRef.current = new AbortController();\n      updateState({\n        status: 'idle',\n        loading: true,\n        error: null,\n        data: null\n      });\n      console.log('Iniciando pago con datos:', paymentData);\n      const response = await paymentService.initiatePayment(paymentData);\n      updateState({\n        status: 'pending_authorization',\n        loading: false,\n        data: response,\n        sessionId: response.sessionId\n      });\n      console.log('Pago iniciado exitosamente:', response);\n    } catch (error) {\n      console.error('Error al iniciar pago:', error);\n      updateState({\n        status: 'error',\n        loading: false,\n        error: error.message || 'Error desconocido al iniciar el pago',\n        data: null\n      });\n    }\n  }, [updateState]);\n\n  // Función para completar el pago después de la autorización\n  const completePayment = useCallback(async sessionId => {\n    try {\n      if (!sessionId) {\n        throw new Error('Se requiere el ID de la sesión');\n      }\n      updateState({\n        loading: true,\n        error: null\n      });\n      console.log('Completando pago para sesión:', sessionId);\n      const response = await paymentService.completePayment(sessionId);\n      updateState({\n        status: 'completed',\n        loading: false,\n        data: response,\n        error: null\n      });\n      console.log('Pago completado exitosamente:', response);\n    } catch (error) {\n      console.error('Error al completar pago:', error);\n      updateState({\n        status: 'error',\n        loading: false,\n        error: error.message || 'Error desconocido al completar el pago'\n      });\n    }\n  }, [updateState]);\n\n  // Función para cancelar el pago\n  const cancelPayment = useCallback(async (reason = 'Pago cancelado por el usuario') => {\n    try {\n      // Cancelar cualquier solicitud en curso\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n\n      // Si hay una sesión activa, intentar cancelarla en el servidor\n      if (paymentState.sessionId) {\n        try {\n          await paymentService.cancelSession(paymentState.sessionId);\n          console.log('Sesión cancelada en el servidor:', paymentState.sessionId);\n        } catch (error) {\n          console.warn('Error cancelando sesión en el servidor:', error.message);\n          // No lanzar error aquí, ya que el estado local se resetea de todos modos\n        }\n      }\n      updateState({\n        status: 'error',\n        loading: false,\n        error: reason,\n        data: paymentState.data // Mantener los datos para referencia\n      });\n      console.log('Pago cancelado:', reason);\n    } catch (error) {\n      console.error('Error al cancelar pago:', error);\n      updateState({\n        status: 'error',\n        loading: false,\n        error: error.message || 'Error cancelando el pago'\n      });\n    }\n  }, [updateState, paymentState.sessionId, paymentState.data]);\n\n  // Función para resetear el estado y empezar de nuevo\n  const resetPayment = useCallback(() => {\n    // Cancelar cualquier solicitud en curso\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    setPaymentState(INITIAL_STATE);\n    console.log('Estado del pago reseteado');\n  }, []);\n\n  // Función para verificar el estado de una sesión\n  const checkSessionStatus = useCallback(async sessionId => {\n    try {\n      const response = await paymentService.getSessionStatus(sessionId);\n      return response;\n    } catch (error) {\n      console.error('Error verificando estado de sesión:', error);\n      throw error;\n    }\n  }, []);\n\n  // Función para obtener información de salud del servidor\n  const checkServerHealth = useCallback(async () => {\n    try {\n      const response = await paymentService.healthCheck();\n      return response;\n    } catch (error) {\n      console.error('Error verificando salud del servidor:', error);\n      throw error;\n    }\n  }, []);\n\n  // Función helper para determinar si se puede cancelar el pago\n  const canCancel = paymentState.status === 'pending_authorization' && !paymentState.loading;\n\n  // Función helper para determinar si se puede resetear\n  const canReset = paymentState.status === 'completed' || paymentState.status === 'error';\n\n  // Función helper para obtener el progreso actual\n  const getProgress = () => {\n    switch (paymentState.status) {\n      case 'idle':\n        return {\n          step: 1,\n          total: 3,\n          label: 'Configurando pago'\n        };\n      case 'pending_authorization':\n        return {\n          step: 2,\n          total: 3,\n          label: 'Esperando autorización'\n        };\n      case 'completed':\n        return {\n          step: 3,\n          total: 3,\n          label: 'Pago completado'\n        };\n      case 'error':\n        return {\n          step: 0,\n          total: 3,\n          label: 'Error en el pago'\n        };\n      default:\n        return {\n          step: 0,\n          total: 3,\n          label: 'Estado desconocido'\n        };\n    }\n  };\n  return {\n    // Estado principal\n    paymentState,\n    // Acciones principales\n    initiatePayment,\n    completePayment,\n    cancelPayment,\n    resetPayment,\n    // Funciones auxiliares\n    checkSessionStatus,\n    checkServerHealth,\n    // Helpers para UI\n    canCancel,\n    canReset,\n    getProgress,\n    // Estado derivado\n    isLoading: paymentState.loading,\n    hasError: paymentState.status === 'error',\n    isCompleted: paymentState.status === 'completed',\n    isPendingAuth: paymentState.status === 'pending_authorization',\n    currentSessionId: paymentState.sessionId\n  };\n};\n_s(usePayment, \"eEW+wB4Jbg1C964Hjt/oEK8QgU0=\");\nexport default usePayment;","map":{"version":3,"names":["useState","useCallback","useRef","paymentService","INITIAL_STATE","status","loading","data","error","sessionId","usePayment","_s","paymentState","setPaymentState","abortControllerRef","updateState","updates","prevState","initiatePayment","paymentData","current","abort","AbortController","console","log","response","message","completePayment","Error","cancelPayment","reason","cancelSession","warn","resetPayment","checkSessionStatus","getSessionStatus","checkServerHealth","healthCheck","canCancel","canReset","getProgress","step","total","label","isLoading","hasError","isCompleted","isPendingAuth","currentSessionId"],"sources":["C:/Users/unequ/Desktop/1-Hackaton/hackaton-ai/front-end/src/hooks/usePayment.js"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\nimport { paymentService } from '../services/paymentService';\r\n\r\nconst INITIAL_STATE = {\r\n  status: 'idle', // 'idle' | 'pending_authorization' | 'completed' | 'error'\r\n  loading: false,\r\n  data: null,\r\n  error: null,\r\n  sessionId: null\r\n};\r\n\r\nexport const usePayment = () => {\r\n  const [paymentState, setPaymentState] = useState(INITIAL_STATE);\r\n  const abortControllerRef = useRef(null);\r\n\r\n  // Función para actualizar el estado de forma segura\r\n  const updateState = useCallback((updates) => {\r\n    setPaymentState(prevState => ({\r\n      ...prevState,\r\n      ...updates\r\n    }));\r\n  }, []);\r\n\r\n  // Función para iniciar el proceso de pago\r\n  const initiatePayment = useCallback(async (paymentData) => {\r\n    try {\r\n      // Cancelar cualquier solicitud anterior\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n      \r\n      abortControllerRef.current = new AbortController();\r\n\r\n      updateState({\r\n        status: 'idle',\r\n        loading: true,\r\n        error: null,\r\n        data: null\r\n      });\r\n\r\n      console.log('Iniciando pago con datos:', paymentData);\r\n\r\n      const response = await paymentService.initiatePayment(paymentData);\r\n      \r\n      updateState({\r\n        status: 'pending_authorization',\r\n        loading: false,\r\n        data: response,\r\n        sessionId: response.sessionId\r\n      });\r\n\r\n      console.log('Pago iniciado exitosamente:', response);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al iniciar pago:', error);\r\n      \r\n      updateState({\r\n        status: 'error',\r\n        loading: false,\r\n        error: error.message || 'Error desconocido al iniciar el pago',\r\n        data: null\r\n      });\r\n    }\r\n  }, [updateState]);\r\n\r\n  // Función para completar el pago después de la autorización\r\n  const completePayment = useCallback(async (sessionId) => {\r\n    try {\r\n      if (!sessionId) {\r\n        throw new Error('Se requiere el ID de la sesión');\r\n      }\r\n\r\n      updateState({\r\n        loading: true,\r\n        error: null\r\n      });\r\n\r\n      console.log('Completando pago para sesión:', sessionId);\r\n\r\n      const response = await paymentService.completePayment(sessionId);\r\n      \r\n      updateState({\r\n        status: 'completed',\r\n        loading: false,\r\n        data: response,\r\n        error: null\r\n      });\r\n\r\n      console.log('Pago completado exitosamente:', response);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al completar pago:', error);\r\n      \r\n      updateState({\r\n        status: 'error',\r\n        loading: false,\r\n        error: error.message || 'Error desconocido al completar el pago'\r\n      });\r\n    }\r\n  }, [updateState]);\r\n\r\n  // Función para cancelar el pago\r\n  const cancelPayment = useCallback(async (reason = 'Pago cancelado por el usuario') => {\r\n    try {\r\n      // Cancelar cualquier solicitud en curso\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      // Si hay una sesión activa, intentar cancelarla en el servidor\r\n      if (paymentState.sessionId) {\r\n        try {\r\n          await paymentService.cancelSession(paymentState.sessionId);\r\n          console.log('Sesión cancelada en el servidor:', paymentState.sessionId);\r\n        } catch (error) {\r\n          console.warn('Error cancelando sesión en el servidor:', error.message);\r\n          // No lanzar error aquí, ya que el estado local se resetea de todos modos\r\n        }\r\n      }\r\n\r\n      updateState({\r\n        status: 'error',\r\n        loading: false,\r\n        error: reason,\r\n        data: paymentState.data // Mantener los datos para referencia\r\n      });\r\n\r\n      console.log('Pago cancelado:', reason);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al cancelar pago:', error);\r\n      \r\n      updateState({\r\n        status: 'error',\r\n        loading: false,\r\n        error: error.message || 'Error cancelando el pago'\r\n      });\r\n    }\r\n  }, [updateState, paymentState.sessionId, paymentState.data]);\r\n\r\n  // Función para resetear el estado y empezar de nuevo\r\n  const resetPayment = useCallback(() => {\r\n    // Cancelar cualquier solicitud en curso\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n\r\n    setPaymentState(INITIAL_STATE);\r\n    console.log('Estado del pago reseteado');\r\n  }, []);\r\n\r\n  // Función para verificar el estado de una sesión\r\n  const checkSessionStatus = useCallback(async (sessionId) => {\r\n    try {\r\n      const response = await paymentService.getSessionStatus(sessionId);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error verificando estado de sesión:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // Función para obtener información de salud del servidor\r\n  const checkServerHealth = useCallback(async () => {\r\n    try {\r\n      const response = await paymentService.healthCheck();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error verificando salud del servidor:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // Función helper para determinar si se puede cancelar el pago\r\n  const canCancel = paymentState.status === 'pending_authorization' && !paymentState.loading;\r\n\r\n  // Función helper para determinar si se puede resetear\r\n  const canReset = paymentState.status === 'completed' || paymentState.status === 'error';\r\n\r\n  // Función helper para obtener el progreso actual\r\n  const getProgress = () => {\r\n    switch (paymentState.status) {\r\n      case 'idle':\r\n        return { step: 1, total: 3, label: 'Configurando pago' };\r\n      case 'pending_authorization':\r\n        return { step: 2, total: 3, label: 'Esperando autorización' };\r\n      case 'completed':\r\n        return { step: 3, total: 3, label: 'Pago completado' };\r\n      case 'error':\r\n        return { step: 0, total: 3, label: 'Error en el pago' };\r\n      default:\r\n        return { step: 0, total: 3, label: 'Estado desconocido' };\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Estado principal\r\n    paymentState,\r\n    \r\n    // Acciones principales\r\n    initiatePayment,\r\n    completePayment,\r\n    cancelPayment,\r\n    resetPayment,\r\n    \r\n    // Funciones auxiliares\r\n    checkSessionStatus,\r\n    checkServerHealth,\r\n    \r\n    // Helpers para UI\r\n    canCancel,\r\n    canReset,\r\n    getProgress,\r\n    \r\n    // Estado derivado\r\n    isLoading: paymentState.loading,\r\n    hasError: paymentState.status === 'error',\r\n    isCompleted: paymentState.status === 'completed',\r\n    isPendingAuth: paymentState.status === 'pending_authorization',\r\n    currentSessionId: paymentState.sessionId\r\n  };\r\n};\r\n\r\nexport default usePayment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}